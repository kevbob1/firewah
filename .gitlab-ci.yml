
image: docker:stable


variables:
   # When using dind service we need to instruct docker, to talk with the
   # daemon started inside of the service. The daemon is available with
   # a network connection instead of the default /var/run/docker.sock socket.
   #
   # The 'docker' hostname is the alias of the service container as described at
   # https://docs.gitlab.com/ee/ci/docker/using_docker_images.html#accessing-the-services
   #
   # Note that if you're using Kubernetes executor, the variable should be set to
   # tcp://localhost:2375 because of how Kubernetes executor connects services
   # to the job container
   DOCKER_HOST: tcp://docker:2375/
   # When using dind, it's wise to use the overlayfs driver for
   # improved performance.
   DOCKER_DRIVER: overlay2
   BUILD_IMAGE_TAG: ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}

services:
   - docker:dind

before_script:
   - docker info

build_image:
   script:
     - docker build -t ${BUILD_IMAGE_TAG} .
     - docker run --rm ${BUILD_IMAGE_TAG} rake test
     - docker push ${BUILD_IMAGE_TAG}


# This is a basic example for a gem or script which doesn't use
# services such as redis or postgres
#before_script:
#  - ruby -v                                   # Print out ruby version for debugging
  # Uncomment next line if your rails app needs a JS runtime:
  # - apt-get update -q && apt-get install nodejs -yqq
#  - gem install bundler  --no-ri --no-rdoc    # Bundler is not installed with the image
#  - bundle install -j $(nproc) --path vendor  # Install dependencies into ./vendor/ruby

#rails:
#  script:
#  - bundle exec rake test

# This deploy job uses a simple deploy flow to Heroku, other providers, e.g. AWS Elastic Beanstalk
# are supported too: https://github.com/travis-ci/dpl
#deploy:
#  type: deploy
#  environment: production
#  script:
#  - gem install dpl
#  - dpl --provider=heroku --app=$HEROKU_APP_NAME --api-key=$HEROKU_PRODUCTION_KEY
